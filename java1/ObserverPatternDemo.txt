import java.util.ArrayList;
import java.util.List;

// Step 1: Observer Interface
interface Observer {
    void update(String message);
}

// Step 2: Concrete Observers
class EmailObserver implements Observer {
    private String name;

    public EmailObserver(String name) {
        this.name = name;
    }

    public void update(String message) {
        System.out.println(name + " received EMAIL update: " + message);
    }
}

class SMSObserver implements Observer {
    private String name;

    public SMSObserver(String name) {
        this.name = name;
    }

    public void update(String message) {
        System.out.println(name + " received SMS update: " + message);
    }
}

// Step 3: Subject (Observable)
class Subject {
    private List<Observer> observers = new ArrayList<>();
    private String state;

    public void attach(Observer observer) {
        observers.add(observer);
    }

    public void detach(Observer observer) {
        observers.remove(observer);
    }

    public void setState(String newState) {
        this.state = newState;
        notifyAllObservers();
    }

    public void notifyAllObservers() {
        for (Observer observer : observers) {
            observer.update(state);
        }
    }
}

// Step 4: Main class to test
public class ObserverPatternDemo {
    public static void main(String[] args) {
        Subject subject = new Subject();

        // Create observers
        Observer emailObserver = new EmailObserver("Alice");
        Observer smsObserver = new SMSObserver("Bob");
        Observer emailObserver2 = new EmailObserver("Charlie");

        // Attach observers to the subject
        subject.attach(emailObserver);
        subject.attach(smsObserver);
        subject.attach(emailObserver2);

        // Change state of subject
        subject.setState("New Promotion Available!");
        subject.setState("Stock Price Updated!");
    }
}
